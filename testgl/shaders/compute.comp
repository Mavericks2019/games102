#version 440 core
layout(local_size_x = 8, local_size_y = 8) in;
layout(rgba32f, binding = 0) uniform image2D outputTex;

uniform int frame;
uniform float aspectRatio;

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct Sphere {
    vec3 center;
    float radius;
    vec3 albedo;
    vec3 emission;
};

struct HitRecord {
    float t;
    vec3 position;
    vec3 normal;
    vec3 albedo;
    vec3 emission;
};

// 场景定义
Sphere spheres[3] = Sphere[3](
    Sphere(vec3(0.0, -100.5, -1.0), 100.0, vec3(0.8, 0.8, 0.8), vec3(0.0)),
    Sphere(vec3(0.0, 0.0, -1.0), 0.5, vec3(0.8, 0.3, 0.3), vec3(0.0)),
    Sphere(vec3(1.0, 0.0, -1.0), 0.5, vec3(0.8, 0.8, 0.3), vec3(5.0, 5.0, 5.0))
);

Ray getRay(vec2 uv) {
    vec3 origin = vec3(0.0, 0.0, 1.0);
    vec3 target = vec3(uv.x * aspectRatio, uv.y, 0.0);
    return Ray(origin, normalize(target - origin));
}

bool hitSphere(Sphere sphere, Ray ray, float t_min, float t_max, inout HitRecord rec) {
    vec3 oc = ray.origin - sphere.center;
    float a = dot(ray.direction, ray.direction);
    float b = dot(oc, ray.direction);
    float c = dot(oc, oc) - sphere.radius * sphere.radius;
    float discriminant = b * b - a * c;
    
    if (discriminant > 0.0) {
        float temp = (-b - sqrt(discriminant)) / a;
        if (temp < t_max && temp > t_min) {
            rec.t = temp;
            rec.position = ray.origin + rec.t * ray.direction;
            rec.normal = (rec.position - sphere.center) / sphere.radius;
            rec.albedo = sphere.albedo;
            rec.emission = sphere.emission;
            return true;
        }
        temp = (-b + sqrt(discriminant)) / a;
        if (temp < t_max && temp > t_min) {
            rec.t = temp;
            rec.position = ray.origin + rec.t * ray.direction;
            rec.normal = (rec.position - sphere.center) / sphere.radius;
            rec.albedo = sphere.albedo;
            rec.emission = sphere.emission;
            return true;
        }
    }
    return false;
}

bool hitWorld(Ray ray, float t_min, float t_max, inout HitRecord rec) {
    HitRecord temp_rec;
    bool hit_anything = false;
    float closest_so_far = t_max;
    
    for (int i = 0; i < spheres.length(); i++) {
        if (hitSphere(spheres[i], ray, t_min, closest_so_far, temp_rec)) {
            hit_anything = true;
            closest_so_far = temp_rec.t;
            rec = temp_rec;
        }
    }
    return hit_anything;
}

vec3 randomInUnitSphere() {
    vec3 p;
    do {
        p = 2.0 * vec3(fract(sin(dot(gl_GlobalInvocationID.xy, vec2(12.9898, 78.233))) * 43758.5453),
                     fract(sin(dot(gl_GlobalInvocationID.yx, vec2(12.9898, 78.233))) * 43758.5453),
                     fract(sin(dot(gl_GlobalInvocationID.xx, vec2(12.9898, 78.233))) * 43758.5453)) - 1.0;
    } while (dot(p, p) >= 1.0);
    return p;
}

vec3 trace(Ray ray) {
    vec3 color = vec3(0.0);
    vec3 attenuation = vec3(1.0);
    
    for (int bounce = 0; bounce < 5; bounce++) {
        HitRecord rec;
        if (hitWorld(ray, 0.001, 1000.0, rec)) {
            // 发射光
            color += attenuation * rec.emission;
            
            // 漫反射
            vec3 target = rec.normal + normalize(randomInUnitSphere());
            ray = Ray(rec.position, normalize(target));
            attenuation *= rec.albedo;
        } else {
            // 天空颜色
            vec3 skyColor = vec3(0.5, 0.7, 1.0);
            color += attenuation * skyColor;
            break;
        }
    }
    return color;
}

void main() {
    ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = (vec2(texCoord) + 0.5) / vec2(imageSize(outputTex));
    uv = uv * 2.0 - 1.0; // 转换到[-1,1]
    
    Ray ray = getRay(uv);
    vec3 color = trace(ray);
    
    // 累积采样
    vec4 prevColor = imageLoad(outputTex, texCoord);
    vec3 accumColor = (prevColor.rgb * frame + color) / (frame + 1);
    
    // 伽马校正
    accumColor = pow(accumColor, vec3(1.0/2.2));
    
    imageStore(outputTex, texCoord, vec4(accumColor, 1.0));
}